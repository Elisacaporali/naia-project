import os
import openai
import streamlit as st
import spacy
import random
import time
import re
from typing import Dict, List, Any
from textblob import TextBlob
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar a chave da API da OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

class NAIAAvancada:
    def __init__(self):
        # Carregar modelo de linguagem
        try:
            self.nlp = spacy.load('pt_core_news_sm')
        except OSError:
            print("Baixando modelo de linguagem...")
            import os
            os.system('python -m spacy download pt_core_news_sm')
            self.nlp = spacy.load('pt_core_news_sm')

        # Configura√ß√µes de personalidade
        self.personalidade = self._carregar_personalidade()
        
        # Contexto da conversa
        self.contexto_conversa = {
            'historico': [],
            'estado_emocional': 'neutro',
            'temas_abordados': set()
        }

        # Palavras-chave de preocupa√ß√£o e ang√∫stia
        self.palavras_preocupacao = [
            'preocupado', 'ansioso', 'medo', 'receio', 'angustiado', 
            'estressado', 'tenso', 'nervoso', 'aflito', 'inseguro'
        ]

    def _carregar_personalidade(self) -> Dict[str, Any]:
        return {
            'nome': 'NAIA',
            'estilo_comunicacao': [
                'emp√°tica', 'adaptativa', 'inteligente', 'criativa'
            ],
            'valores': [
                'inclus√£o', 'compreens√£o', 'crescimento pessoal', 'neurodiversidade'
            ]
        }

    def processar_entrada(self, mensagem: str) -> Dict[str, Any]:
        doc = self.nlp(mensagem)
        sentimento = TextBlob(mensagem).sentiment
        entidades = [(ent.text, ent.label_) for ent in doc.ents]
        inten√ß√£o = self._detectar_intencao(mensagem)
        
        return {
            'texto_original': mensagem,
            'tokens': [token.text for token in doc],
            'entidades': entidades,
            'sentimento': {
                'polaridade': sentimento.polarity,
                'subjetividade': sentimento.subjectivity
            },
            'intencao': inten√ß√£o
        }

    def _detectar_intencao(self, mensagem: str) -> str:
        padroes_intencao = {
            'ajuda': r'\b(ajud[ae]r?|orient[ae]r?|apoiar)\b',
            'informacao': r'\b(inform[ae]r?|saber|conhec[oe]r?)\b',
            'emocional': r'\b(sentir|emo√ß[√£a]o|humor|triste|feliz)\b',
            'aprendizado': r'\b(aprend[ie]r|desenvolv[ae]r?|crescer)\b'
        }
        
        for intencao, padrao in padroes_intencao.items():
            if re.search(padrao, mensagem.lower()):
                return intencao
        
        return 'conversa_geral'

    def gerar_resposta(self, analise: Dict[str, Any]) -> str:
        estrategias = {
            'ajuda': self._resposta_ajuda,
            'informacao': self._resposta_informacao,
            'emocional': self._resposta_emocional,
            'aprendizado': self._resposta_aprendizado,
            'conversa_geral': self._resposta_conversa_geral
        }
        
        estrategia = estrategias.get(analise['intencao'], self._resposta_conversa_geral)
        resposta = estrategia(analise)
        
        self.contexto_conversa['historico'].append({
            'entrada': analise['texto_original'],
            'resposta': resposta
        })
        
        return resposta

    def _resposta_ajuda(self, analise: Dict[str, Any]) -> str:
        respostas = [
            f"Entendo que voc√™ precisa de ajuda. Como posso ser √∫til hoje?",
            "Estou aqui para auxiliar. Pode me contar mais sobre o que est√° precisando?",
            "Ajudar √© minha especialidade. Vamos trabalhar juntos para encontrar a melhor solu√ß√£o."
        ]
        return random.choice(respostas)

    def _resposta_informacao(self, analise: Dict[str, Any]) -> str:
        respostas = [
            "Que tipo de informa√ß√£o voc√™ est√° buscando? Estou pronta para ajudar.",
            "Informa√ß√£o √© poder. Vamos explorar juntos o que voc√™ quer saber.",
            "Adoro aprender coisas novas! Qual √© a sua d√∫vida?"
        ]
        return random.choice(respostas)

    def _resposta_emocional(self, analise: Dict[str, Any]) -> str:
        sentimento = analise['sentimento']
        texto = analise['texto_original'].lower()
        
        nivel_preocupacao = sum(1 for palavra in self.palavras_preocupacao if palavra in texto)
        
        if nivel_preocupacao > 2:
            respostas_profundas = [
                "Percebo que voc√™ est√° passando por um momento realmente desafiador. Gostaria de me contar mais?",
                "Parece que h√° muita press√£o te afetando agora. Estou aqui para ouvir sem julgamentos.",
                "Entendo que momentos de preocupa√ß√£o podem ser muito intensos. Como posso te apoiar agora?",
                "Suas emo√ß√µes s√£o importantes e v√°lidas. Podemos conversar sobre o que est√° te causando tanto desconforto?",
                "√Äs vezes, compartilhar o peso pode alivi√°-lo um pouco. Quer explorar o que est√° sentindo?"
            ]
            return random.choice(respostas_profundas)
        
        elif nivel_preocupacao > 0:
            respostas_medias = [
                "Consigo perceber que algo est√° te incomodando. Quer conversar sobre?",
                "Parece que h√° algo te deixando inquieto. Como posso ajudar?",
                "Suas preocupa√ß√µes s√£o importantes. Estou aqui para ouvir e apoiar.",
                "Cada desafio √© uma oportunidade de crescimento. Quer explorar juntos?",
                "√Äs vezes, colocar os pensamentos para fora pode trazer al√≠vio."
            ]
            return random.choice(respostas_medias)
        
        else:
            if sentimento['polaridade'] > 0.5:
                respostas_positivas = [
                    "Que bom ver voc√™ com essa energia positiva!",
                    "Sua atitude est√° radiante hoje!",
                    "Que momento incr√≠vel para compartilhar suas reflex√µes.",
                    "Estou animada para ouvir mais sobre o que te deixa t√£o bem.",
                    "Sua perspectiva parece muito inspiradora agora."
                ]
                return random.choice(respostas_positivas)
            
            elif sentimento['polaridade'] < -0.5:
                respostas_negativas = [
                    "Parece que voc√™ est√° enfrentando momentos dif√≠ceis.",
                    "Consigo sentir o peso dos seus pensamentos.",
                    "Cada desafio tamb√©m traz uma oportunidade de crescimento.",
                    "Estou aqui para te ouvir, sem press√£o.",
                    "Seus sentimentos s√£o completamente v√°lidos."
                ]
                return random.choice(respostas_negativas)
            
            else:
                respostas_neutras = [
                    "Estou curiosa para entender mais sobre o que est√° passando.",
                    "Cada momento tem seu pr√≥prio significado. O que gostaria de compartilhar?",
                    "Estou aqui, pronta para ouvir o que quiser me contar.",
                    "Sua hist√≥ria √© √∫nica e importante.",
                    "Como posso ser √∫til neste momento?"
                ]
                return random.choice(respostas_neutras)

    def _resposta_aprendizado(self, analise: Dict[str, Any]) -> str:
        respostas = [
            "Aprender √© uma jornada incr√≠vel! Qual √°rea te interessa?",
            "Cada novo conhecimento nos transforma. Do que voc√™ gostaria de aprender hoje?",
            "A curiosidade √© a chave do crescimento. Como posso te ajudar nessa jornada?"
        ]
        return random.choice(respostas)

    def _resposta_conversa_geral(self, analise: Dict[str, Any]) -> str:
        respostas = [
            "Estou interessada em ouvir mais sobre o que voc√™ quer compartilhar.",
            "Cada conversa √© uma oportunidade de conex√£o. Do que gostaria de falar?",
            "Minha mente est√° aberta e pronta para uma conversa interessante!"
        ]
        return random.choice(respostas)

# Fun√ß√£o para obter resposta do ChatGPT
def obter_resposta_chatgpt(mensagens):
    try:
        resposta = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=mensagens
        )
        return resposta.choices[0].message["content"]
    except Exception as e:
        return f"Erro ao acessar a API do ChatGPT: {e}"

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(page_title="NAIA - Assistente Neuroadaptativa", page_icon="üß†")

# Interface do Streamlit
st.title("NAIA - Assistente Neuroadaptativa")

# Inicializar NAIA
if 'naia' not in st.session_state:
    st.session_state.naia = NAIAAvancada()

# Inicializar hist√≥rico de mensagens
if "mensagens" not in st.session_state:
    st.session_state.mensagens = []

# Exibir hist√≥rico de mensagens
for mensagem in st.session_state.mensagens:
    with st.chat_message(mensagem["role"]):
        st.markdown(mensagem["content"])

# Entrada do usu√°rio
if prompt := st.chat_input("Digite sua mensagem para a NAIA:"):
    # Adicionar mensagem do usu√°rio ao hist√≥rico
    st.session_state.mensagens.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Processar entrada com NAIA
    analise = st.session_state.naia.processar_entrada(prompt)
    resposta_naia = st.session_state.naia.gerar_resposta(analise)

    # Obter resposta do ChatGPT
    mensagens_chatgpt = [
        {"role": "system", "content": "Voc√™ √© NAIA, uma assistente neuroadaptativa focada em inclus√£o e neurodiversidade."},
        {"role": "user", "content": prompt},
        {"role": "assistant", "content": resposta_naia}
    ]
    resposta_chatgpt = obter_resposta_chatgpt(mensagens_chatgpt)

    # Combinar respostas
    resposta_final = f"{resposta_naia}\n\nAdicional do ChatGPT: {resposta_chatgpt}"

    # Exibir resposta da NAIA
    with st.chat_message("assistant"):
        st.markdown(resposta_final)
    
    # Adicionar resposta da NAIA ao hist√≥rico
    st.session_state.mensagens.append({"role": "assistant", "content": resposta_final})

# Bot√£o para limpar o hist√≥rico
if st.button("Limpar Conversa"):
    st.session_state.mensagens = []
    st.experimental_rerun()

# Exibir informa√ß√µes sobre a NAIA
with st.expander("Sobre a NAIA"):
    st.write("""
    NAIA √© uma Assistente Neuroadaptativa de Intelig√™ncia Artificial, projetada para fornecer suporte e informa√ß√µes sobre neurodiversidade e inclus√£o.
    Ela √© capaz de adaptar sua comunica√ß√£o para atender √†s necessidades espec√≠ficas de cada usu√°rio.
    """)

# Rodap√©
st.markdown("---")
st.markdown("Desenvolvido com ‚ù§Ô∏è para promover a inclus√£o e compreens√£o da neurodiversidade.")
